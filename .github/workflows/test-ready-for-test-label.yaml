name: Test Ready for Test Label
# You have to use your imagination a bit here in that when the PR has a 'Test Ready' label saved to it, a workflow
#  will fire off that will:
#  Generate a tag
#  Tag the code repo
#  Deploy the infrastructure
#  Deploy the application
#  That's pretty much what this test pipeline does
on:
  pull_request:
    types: [ labeled ]

jobs:
  metadata:
    name: "Get Metadata"
    uses: ./.github/workflows/metadata.yaml

  derive-commit-hash-for-pr:
    name: "Get last commit on task branch"
    runs-on: ubuntu-latest
    outputs:
      branch_commit_hash: ${{ steps.get_hash_for_pr.outputs.branch_commit_hash }}
    steps:
      - name: "Get branch commit hash for branch"
        id: get_hash_for_pr
        run: |
          branch_commit_hash_full=${{ github.event.pull_request.head.sha }}
          branch_commit_hash=$(git rev-parse --short $branch_commit_hash_full)
          echo "branch commit hash: [$branch_commit_hash]"
          echo "branch_commit_hash=$branch_commit_hash" >> $GITHUB_OUTPUT

  generate-tag-name:
    name: "Generate Tag Name"
    needs:
      [
        metadata,
        derive-commit-hash-for-pr,
      ]
    uses: ./.github/workflows/generate-tag-name.yaml
    with:
      workspace: ${{ needs.metadata.outputs.workspace }}
      tag_type: test
      use_commit_hash: "yes"
      pr_head_sha: ${{ needs.derive-commit-hash-for-pr.branch_commit_hash }}
  tag-repository:
    name: "Tag Repository"
    needs:
      [
        metadata,
        generate-tag-name,
      ]
    uses: ./.github/workflows/tag-repository.yaml
    with:
      tag_to_push: ${{ needs.generate-tag-name.outputs.tag_name }}
      tag_overwrite: "yes"
      repository_tag: ""
  deploy-infrastructure:
    name: "Deploy Infrastructure"
    needs:
      [
        metadata,
        generate-tag-name,
        tag-repository,
      ]
    uses: ./.github/workflows/deploy-infrastructure.yaml
    with:
      environment: mgmt
      workspace: ${{ needs.metadata.outputs.workspace }}
      domain: "uec-dos-management"
      stacks: "['test-ready-for-test-stack']"
      tag: ${{ needs.generate-tag-name.outputs.tag_name }}
      action: apply
    secrets: inherit

  deploy-application:
    name: Deploy lambda application code
    needs:
      [
        metadata,
        deploy-infrastructure,
        generate-tag-name,
        derive-commit-hash-for-pr
      ]
    uses: ./.github/workflows/deploy-lambda-code.yaml
    with:
      environment: mgmt
      workspace: ${{ needs.metadata.outputs.workspace }}
      services: "['healthcare-services-data-manager']"
      directory: 'application'
      tag: ${{ needs.generate-tag-name.outputs.tag_name }}
      # commit_hash: ${{ needs.metadata.outputs.commit_hash }}
      commit_hash: ${{ needs.derive-commit-hash-for-pr.branch_commit_hash }}
      artefact_bucket_name: ${{ needs.metadata.outputs.artefact_bucket_name }}
    secrets: inherit

  cleardown-infrastructure:
    name: "Cleardown Infrastructure"
    needs:
      [
        metadata,
        generate-tag-name,
        tag-repository,
        deploy-infrastructure,
        deploy-application,
      ]
    uses: ./.github/workflows/deploy-infrastructure.yaml
    with:
      environment: mgmt
      workspace: ${{ needs.metadata.outputs.workspace }}
      domain: "uec-dos-management"
      stacks: "['test-ready-for-test-stack']"
      tag: ${{ needs.generate-tag-name.outputs.tag_name }}
      action: destroy
    secrets: inherit
